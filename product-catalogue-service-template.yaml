apiVersion: v1
kind: Template
metadata:
  name: product-catalogue-service
  annotations:
    description: "Deploys a product catalogue service"
    tags: ocp, product-catalogue-service

parameters:
  - name: DOCKER_REPOSITORY
    description: 'Openshift internal docker repository'
    required: true
    value: ''
  - name: PROJECT_NAME
    description: 'Target project name'
    required: true
    value: ''
  - name: DOCKER_SOURCE_REPOSITORY
    description: 'Docker source repository'
    required: true
    value: ''
  - name: DOCKER_SOURCE_GROUP
    description: 'Docker source group'
    required: true
    value: ''
  - name: PRODUCT_CATALOGUE_SERVICE_DOMAIN_NAME
    description: 'Target domain name'
    required: true
    value: ''
  - name: PRODUCT_CATALOGUE_SERVICE_REPLICAS
    description: "Replicas"
    required: false
    value: '2'
  - name: LOGS_PATH
    description: "Logs path"
    required: false
    value: '/logs'
  - name: JAVA_OPTS
    description: "Java opts"
    required: false
    value: '-XX:+UseContainerSupport -XX:MaxRAMPercentage=70.0 -XX:InitialRAMPercentage=70.0 -XX:CompressedClassSpaceSize=200m -XX:+UseG1GC -XX:+UseStringDeduplication'
  - name: POD_MEMORY_LIMIT
    description: "POD memory limit"
    required: true
    value: '1500Mi'
  - name: POD_CPU_REQUEST
    description: "POD CPU request"
    required: true
    value: '300m'

objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: 'product-catalogue-service'
      annotations:
        openshift.io/image.insecureRepository: "true"
    spec:
      tags:
        - from:
            kind: DockerImage
            name: ${DOCKER_SOURCE_REPOSITORY}/${DOCKER_SOURCE_GROUP}/product-catalogue-service:latest
          name: latest
          importPolicy:
            scheduled: true
          referencePolicy:
            type: Local
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: product-catalogue-service
      name: product-catalogue-service
      namespace: ${PROJECT_NAME}
      annotations:
        haproxy.router.openshift.io/timeout: 600s
    spec:
      host: ${PRODUCT_CATALOGUE_SERVICE_DOMAIN_NAME}
      path: /productcatalogue/
      port:
        targetPort: 8080-tcp
      to:
        kind: Service
        name: product-catalogue-service
        weight: 100
      wildcardPolicy: None
    status:
      ingress:
        - conditions:
          host: ${PRODUCT_CATALOGUE_SERVICE_DOMAIN_NAME}
          routerName: router
          wildcardPolicy: None
  - apiVersion: v1
    kind: Service
    metadata:
      name: product-catalogue-service
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          targetPort: 8080
      selector:
        deploymentconfig: product-catalogue-service
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: product-catalogue-service
    spec:
      replicas: ${{PRODUCT_CATALOGUE_SERVICE_REPLICAS}}
      selector:
        app: product-catalogue-service
        deploymentconfig: product-catalogue-service
      strategy:
        type: Rolling
        rollingParams:
          timeoutSeconds: 1200
      template:
        metadata:
          labels:
            app: product-catalogue-service
            deploymentconfig: product-catalogue-service
        spec:
          containers:
            - env:
                - name: JAVA_OPTS
                  value: '${JAVA_OPTS}'
                - name: TZ
                  value: 'Europe/Bratislava'
              image: ${DOCKER_REPOSITORY}/${PROJECT_NAME}/product-catalogue-service:latest
              imagePullPolicy: Always
              name: product-catalogue-service
              ports:
                - containerPort: 8080
                  protocol: TCP
              resources:
                limits:
                  memory: ${POD_MEMORY_LIMIT}
                requests:
                  cpu: ${POD_CPU_REQUEST}
                  memory: 256Mi
              readinessProbe:
                tcpSocket:
                  port: 8080
                initialDelaySeconds: 120
                timeoutSeconds: 5
                periodSeconds: 10
                failureThreshold: 10
              livenessProbe:
                tcpSocket:
                  port: 8080
                initialDelaySeconds: 300
                timeoutSeconds: 5
                periodSeconds: 10
                failureThreshold: 3
              volumeMounts:
                - mountPath: /logs
                  subPath: ${PROJECT_NAME}/product-catalogue-service
                  name: logs
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 100
                  podAffinityTerm:
                    labelSelector:
                      matchExpressions:
                        - key: "app"
                          operator: In
                          values:
                            - product-catalogue-service
                    topologyKey: "kubernetes.io/hostname"
          volumes:
            - hostPath:
                path: ${LOGS_PATH}
              name: logs

